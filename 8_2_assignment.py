# -*- coding: utf-8 -*-
"""8_2_assigment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lUlSM5p88UJImugslrMZH7CBtmX-t1aU

# Assignment 8.2

> Replace all TODOs with your code.
>
> Do not change any other code and do not add/remove cells!

## Inheritance

### Task 1

Define a base class named `Account` to a general bank account.

The class should include an initialization method (`__init__`), taking into account the number and holder name and methods for depositing money to the account and withdrawing from it. Do not forget to ensure that the account never has a negative balance.

String representation (`__str__`) should be an abstract method (throw a corresponding error if it is called on the base `Account` class
"""

from abc import ABC, abstractmethod


class Account:
    def __init__(self, number, name):
      self.number = number
      self.name = name
      self.balance = 0.0


    def deposit(self, money):
      if money > 0:
        self.balance += money
      else:
        print("You can't deposit money.")


    def withdraw(self,money):
      if self.balance >= money:
        self.balance -= money
      else:
        print("You can't withdraw money.")


    @abstractmethod
    def __str__(self):
        raise NotImplementedError("This method have to implemented in a subclass.")

"""### Task 2

Derive a `CurrentAccount` subclass from the `Account` base class and provide its own implementation for the `__str__` method. The text representation should mention the type of account, account number, and remaining balance.
"""

class CurrentAccount(Account):
    def __init__(self, number, name):
        super().__init__(number, name)


    def __str__(self):
        return f"Account type is CurrentAccount, number: {self.number}, balance: {self.balance}."

"""### Task 3

Derive a `SavingsAccount` subclass from the `Account` base class and provide its implementation for the `__str__` method. When initializing objects of this class, the caller must provide the `interest_rate` parameter.

 The text representation should mention the type of account, interest rate, account number, and remaining balance.

Provide additional method `add_interest` that adds interest based on `interest_rate`:
$$new\_balance = old\_balance + old\_balance * interest\_rate$$
"""

class SavingsAccount(Account):
    def __init__(self, number, name, interest):
        super().__init__(number, name)
        self.interest = interest

    def __str__(self):
        return f"Account type is SavingsAccount, interest rate: {self.interest} number: {self.number}, balance: {self.balance}."


    def add_interest(self):
        new_balance = self.balance + self.balance * self.interest
        self.balance += new_balance

"""### Task 4

Create an array with different accounts, add/withdraw money from some of them, iterate over the array, and print the text representation of each.
"""

account_1 = CurrentAccount("021", "Alice")
account_2 = SavingsAccount("222", "Bob", 0.05)


account_1.deposit(2000)
account_2.deposit(4500)


account_1.withdraw(500)
account_2.withdraw(700)


account_2.add_interest()

accounts = [account_1, account_2]

for account in accounts:
    print(account)