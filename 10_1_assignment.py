# -*- coding: utf-8 -*-
"""10_1_assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xhH1zj2FAC7k9NPDtdxVv0e2UM_TTpRD

# Assignment 10.1

> Replace all TODOs with your code. Do not change any other code.
"""

# Do not edit this cell

import unittest
import requests
from unittest.mock import Mock, patch

"""## Testing

### Task 1

Let's consider the following function `calculate_average`:
"""

def calculate_average(numbers):
  if not numbers:
        raise ValueError("The list is empty")
  return sum(numbers) / len(numbers)

"""Now, write tests for several cases:
- A simple case when the result is a whole number
- In cases where the result is decimal, how do you compare them?
- Case when the list is empty - what happens? Is `ZeroDivisionError` really what we want here? Let's change the implementation to raise `ValueError`.
"""

class TestCalculateAverage(unittest.TestCase):

    def test_calculate_average_whole(self):
        result = calculate_average([1, 8, 18])
        self.assertEqual(result, 9)

    def test_calculate_average_decimal(self):
        result = calculate_average([1.1, 2.2, 3.3])
        self.assertAlmostEqual(result, 2.2, places=4)

    def test_calculate_average_empty(self):
        with self.assertRaises(ValueError) as context:
            calculate_average([])
        self.assertEqual(str(context.exception), "The list is empty")

# To run the tests:
if __name__ == "__main__":
  unittest.main(argv=[''], exit=False)

"""### Task 2

Let's consider function `get_weather`. It makes an external request to get the weather in a given city. Obviously, the weather constantly changes, so we cannot rely on it in our tests.

Let's write a test replacing the real request with a mock. Check that the request was called with the correct city.
"""

def get_weather(city):
    try:
        response = requests.get(f"https://api.weather.com/v1/weather?q={city}")
        if response.status_code == 200:
            return response.json()
        else:
            return None
    except requests.exceptions.RequestException:
        return None

class TestGetWeather(unittest.TestCase):

    @patch("requests.get")
    def test_get_weather_request_made(self, mock_get):

        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {'temperature': 15.5}
        mock_get.return_value = mock_response

        city = "Los Angeles"
        result = get_weather(city)

        mock_get.assert_called_with(f"https://api.weather.com/v1/weather?q={city}")
        self.assertEqual(result, {'temperature': 15.5})

    @patch("requests.get")
    def test_get_weather_request_error(self, mock_get):
        mock_get.side_effect = requests.exceptions.RequestException

        city = "Los Angeles"
        result = get_weather(city)

        mock_get.assert_called_once()
        self.assertIsNone(result)

if __name__ == "__main__":
    unittest.main(argv=[''], exit=False)