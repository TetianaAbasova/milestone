# -*- coding: utf-8 -*-
"""10_2_assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K6wJDTHNGJlUUrK8HOK-V3dbwtOT1VCK

# Assignment 10.2

> Replace all TODOs with your code. Do not change any other code.
"""

# Do not edit this cell

import csv
import unittest

"""## Clean code

### Task 1

You are given a function that reads a csv file with temperature measurements (see example below), converts Fahrenheit values to Celsius, calculates and prints some statistics, and writes to another file. It looks a bit messy, let's clean it up!

Example file:
```csv
Temperature (F)
78.5
81.2
75.9
82.1
```

Do the steps below one by one, editing the code in the cell:
1. Naming is so ambiguous and unclear, let's rename variables and function name with proper names.
2. Are these comments really useful?
3. This function does quite a lot, let's divide it in the way that each function does only one thing, and there's one main function that uses others.
4. There seem to be some magic coefficients in the temperature conversion part; let's make them obvious.

If you find any additional improvements, feel free to implement them and leave a comment under your code with an explanation.
"""

Fahrenheit_offset = 32
Fahrenheit_to_сelsius = 5 / 9


def read_temperatures_csv(file_path):
    temperatures_celsius_degrees = []

    with open(file_path, 'r') as file:
        reader = csv.reader(file)
        next(reader)
        for row in reader:
            temp_fahrenheit = float(row[0])
            temp_celsius = (temp_fahrenheit - Fahrenheit_offset) * Fahrenheit_to_сelsius
            temperatures_celsius_degrees.append(temp_celsius)

    return temperatures_celsius_degrees

def calculate_temp(temperatures):
    avg_temp = sum(temperatures) / len(temperatures)
    min_temp = min(temperatures)
    max_temp = max(temperatures)
    return avg_temp, min_temp, max_temp


def print_statistics(avg_temp, min_temp, max_temp):
    print("Statistics:")
    print(f"Average: {avg_temp:.2f}°C")
    print(f"Minimum: {min_temp:.2f}°C")
    print(f"Maximum: {max_temp:.2f}°C")


def write_temperatures_csv(file_path, temperatures):
    with open(file_path, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['Temperature (°C)'])
        for temp in temperatures:
            writer.writerow([temp])


def main(input_file, output_file):
    temperatures = read_temperatures_csv(input_file)
    avg_temp, min_temp, max_temp = calculate_temp(temperatures)
    write_temperatures_csv(output_file, temperatures)
    print_statistics(avg_temp, min_temp, max_temp)

"""### Task 2

How would you write tests for the initial implementation? What exactly would you test in the function?

I hope you see now that once functionality is separated, it's easier to test it in isolation. So, let's write a couple of unit tests for your function and one integration test for your main function.

Hint: you would probably want to mock reading from/writing to file to make the test independent from the environment.
"""

class UnitTestCase(unittest.TestCase):

    def test_read_temperatures_csv(self):
        mock_csv_data = "Temperature (F)\n78.5\n81.2\n75.9\n82.1\n"
        celsius_result = [25.83, 27.33, 24.39, 27.83]


        with open("test_file.csv", 'w', newline='') as f:
            f.write(mock_csv_data)

        result = read_temperatures_csv("test_file.csv")

        for i in range(4):
            self.assertAlmostEqual(celsius_result[i], result[i], places=2)

    def test_calculate_temp(self):
        temperatures = [25.83, 27.33, 24.39, 27.83]
        avg_temp, min_temp, max_temp = calculate_temp(temperatures)

        self.assertAlmostEqual(avg_temp, 26.35, delta=0.01)
        self.assertAlmostEqual(min_temp, 24.39, places=2)
        self.assertAlmostEqual(max_temp, 27.83, places=2)

    def test_write_temperatures_csv(self):
        temperatures = [25.83, 27.33, 24.39, 27.83]

        with open("test_file_output.csv", 'w', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(['Temperature (°C)'])
            for temp in temperatures:
                writer.writerow([temp])

        with open("test_file_output.csv", 'r', newline='') as f:
            reader = csv.reader(f)
            rows = list(reader)

            self.assertEqual(rows[0], ['Temperature (°C)'])
            self.assertEqual(rows[1], ['25.83'])
            self.assertEqual(rows[2], ['27.33'])
            self.assertEqual(rows[3], ['24.39'])
            self.assertEqual(rows[4], ['27.83'])


class IntegrationTestCase(unittest.TestCase):

    def test_main(self):
        mock_csv_data = "Temperature (F)\n78.5\n81.2\n75.9\n82.1\n"
        celsius_result = [25.83, 27.33, 24.39, 27.83]

        # Створюємо вхідний файл test_file.csv
        with open("test_file.csv", 'w', newline='') as f:
            f.write(mock_csv_data)

        main("test_file.csv", "test_file_output.csv")

        with open("test_file_output.csv", 'r', newline='') as f:
            reader = csv.reader(f)
            rows = list(reader)

            self.assertEqual(rows[0], ['Temperature (°C)'])
            self.assertEqual(round(float(rows[1][0]), 2), 25.83)
            self.assertEqual(round(float(rows[2][0]), 2), 27.33)
            self.assertEqual(round(float(rows[3][0]), 2), 24.39)
            self.assertEqual(round(float(rows[4][0]), 2), 27.83)


# if __name__ == "__main__":
#     unittest.main()

if __name__ == "__main__":
    unittest.TextTestRunner().run(unittest.TestLoader().loadTestsFromTestCase(UnitTestCase))
    unittest.TextTestRunner().run(unittest.TestLoader().loadTestsFromTestCase(IntegrationTestCase))